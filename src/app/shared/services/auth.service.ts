import { Injectable, NgZone } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/compat/auth';
import { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/compat/firestore';
import { Router } from '@angular/router';
import { User } from './user';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  userData: any;

  constructor(public afs: AngularFirestore, public afAuth: AngularFireAuth , public router: Router, public ngZone: NgZone) {
    this.afAuth.authState.subscribe(user => {
      if (user) {
        this.userData = user;
        localStorage.setItem('user', JSON.stringify(this.userData));
      }

      else {
        localStorage.setItem('user', 'null');
        JSON.parse(localStorage.getItem('user') || '{}');
      }
    })
  }

  login(user: User) {
    return this.afAuth.signInWithEmailAndPassword(user.email, user.password).then((result) => {
      this.ngZone.run(() => {
        //re-route user to forum page after successful login
        this.router.navigate(['main']);
      });
      
      //set uid of user from '' to uid generated by result
      user.uid = result.user?.uid!;

      //set displayName of user from '' to user displayName
      user.displayName = result.user?.displayName!;
      this.SetUserData(user);

    }).catch((err) => {
      window.alert(err.message);
    })
  }

  register(user: User) {
    return this.afAuth.createUserWithEmailAndPassword(user.email, user.password).then((result) => {
      
      //set result.displayName to user.displayName
        //(result.displayName will always be set to null on creation unless .updateProfile is called)
      result.user?.updateProfile({
        displayName: user.displayName
      })

      //set uid of user from '' to uid generated by result
      user.uid = result.user?.uid!;

      //pass data to SetUserData
      this.SetUserData(user);

      //re-route user to login page after successful registration
      this.router.navigate(['']);

    }).catch((err) => {
      window.alert(err.message)
    })
  }

  SetUserData(user: any) {
    const userRef: AngularFirestoreDocument<User> = this.afs.doc(`users/${user.uid}`);
    
    //assigning data to be stored in Firestore Database Document
    const userData: User = {
      uid: user.uid,
      email: user.email,
      displayName: user.displayName,
      password: user.password
    }

    //create document in Firestore Database
    return userRef.set(userData, {
      merge: true
    })
  }

  logout() {
    return this.afAuth.signOut().then(() => {
      localStorage.removeItem('user');
      this.router.navigate(['login']);
    })
  }

  get isLoggedIn(): boolean {
    const user = JSON.parse(localStorage.getItem('user') || '');
    return user !== null ? true: false;
  }
}
